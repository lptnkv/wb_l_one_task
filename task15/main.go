package main

import (
	"fmt"
	"math/rand"
	"unicode/utf8"
)

const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

var runes = []rune("Helo‰∏ñÁïå–ø—Ä–∏–≤–µ—ÇüòÄüòâ")

// –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main –∏–ª–∏ someFunc, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
// var justString string

func main() {
	someFunc()
}

// –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é justString —Å—Ä–µ–∑–∞—é—Ç—Å—è 100 –±–∞–π—Ç
// –í–∑—è—Ç–∏–µ —Å—Ä–µ–∑–∞ –Ω–µ –∫–æ–ø–∏—Ä—É–µ—Ç –ª–µ–∂–∞—â–∏–π –ø–æ–¥ –Ω–∏–º –º–∞—Å—Å–∏–≤, —Ç–∞–∫ —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è, –ø–æ–∫–∞ gc –Ω–µ —É–Ω–∏—á—Ç–æ–∂–∏—Ç –µ–≥–æ (—Ç–æ –µ—Å—Ç—å –ø–æ–∫–∞ –Ω–∞ –Ω–µ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏)
func someFunc() {
	// –û–ø—Ä–µ–¥–µ–ª–∏–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é justString –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	var justString string

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–º–µ—Ä–æ–º 1024 –±–∞–π—Ç
	v := createHugeByteString(1 << 10)
	// –ë–µ—Ä–µ–º —Å–ª–∞–π—Å —Ä–∞–∑–º–µ—Ä–æ–º 100 –±–∞–π—Ç
	justString = v[:100]
	fmt.Println("string:", justString)

	v2 := createHugeRuneString(1 << 10)
	// –ë–µ—Ä–µ–º —Å–ª–∞–π—Å —Ä–∞–∑–º–µ—Ä–æ–º 100 –±–∞–π—Ç!!!
	justString = v2[:100]
	// –¢–∞–∫ –∫–∞–∫ —Ä—É–Ω—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 1 –±–∞–π—Ç–∞ –≤ –ø–∞–º—è—Ç–∏, —Ç–æ –Ω–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –æ–±—Ä–µ–∑–∞—Ç—å—Å—è (ÔøΩÔøΩÔøΩÔøΩ)
	fmt.Println("rune string:", justString)
	fmt.Println("length in bytes and runes: ", len(justString), utf8.RuneCountInString(justString))

	// –ë–µ—Ä–µ–º —Å–ª–∞–π—Å —Ä–∞–∑–º–µ—Ä–æ–º 100 —Ä—É–Ω
	justString = firstNRunes(v2, 100)
	fmt.Println("better rune string:", justString)
	fmt.Println("length in bytes and runes: ", len(justString), utf8.RuneCountInString(justString))

}

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–º–µ—Ä–æ–º 1024 –±–∞–π—Ç –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ASCII
// –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ, —Ç–∞–∫ —á—Ç–æ —É –Ω–∞—Å –≤ –ø–∞–º—è—Ç–∏ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ 1024 –±–∞–π—Ç
func createHugeByteString(size int) string {
	b := make([]byte, size)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–º–µ—Ä–æ–º 1024 —Ä—É–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ utf8
func createHugeRuneString(size int) string {
	r := make([]rune, size)
	for i := range r {
		randIndex := rand.Intn(len(runes))
		r[i] = runes[randIndex]
	}
	return string(r)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–∞–π—Å–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö n —Ä—É–Ω
func firstNRunes(str string, n int) string {
	v := []rune(str)
	if n >= len(v) {
		return str
	}
	return string(v[:n])
}

func firstNBytes(src string, n int) string {
	res := make([]byte, len(src))
	copy(res, src)
	return string(res)
}
